import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import yfinance as yf

# Load stock data using Yahoo Finance (e.g., Apple stock)
stock_data = yf.download('AAPL', start='2020-01-01', end='2023-01-01')

# Display the first few rows
print("Data Head:\n", stock_data.head())

# Feature Engineering: Calculate moving average as a feature
stock_data['10_day_MA'] = stock_data['Close'].rolling(window=10).mean()
stock_data.dropna(inplace=True)  # Drop rows with NaN values due to rolling window

# Define features and target variable
X = stock_data[['10_day_MA']]  # Feature: 10-day moving average
y = stock_data['Close']         # Target: Closing price

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Plot actual vs predicted prices
plt.figure(figsize=(10, 5))
plt.plot(y_test.index, y_test, label='Actual Price')
plt.plot(y_test.index, y_pred, label='Predicted Price')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('Actual vs Predicted Stock Prices')
plt.legend()
plt.show()

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
